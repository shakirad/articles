Creating a generation of technological innovators

<p>For people of my generation, when it comes to computers, children and their parents are seen as a binary. Children are the savvy explorers who, when presented with a backlit screen and an interface, can quickly navigate a path through previously uncharted technological waters. Parents, when confronted with the same wilderness, sit down and curl up into a ball, occasionally tapping the escape key in the hope of being airlifted to the safety of a Word document. Or so the stereotype goes. However, I feel a certain reluctance to gloat at my generation's victory of understanding in this field.</p>

<p>As a physics teacher, I have always felt that there are two ways for a student to pass a GCSE. One is to completely familiarise themselves with the curriculum content and specification points. By engaging with this front-end, they can display real proficiency when confronted with an exam that is built around these specific outcomes. The other (longer) way is to build concepts from the ground up, gaining an understanding of why and how certain ideas (such as electricity) work. This back-end approach then just requires the icing of a scanning of the specific specification points for a particular syllabus. Needless to say, the latter approach is the more profound, and the one which will allow for success even when applied across different specifications. Understanding concepts from the ground up will always lead to a greater ability to construct, create and manipulate ideas than an exceptional front-end user has.</p>

<p>When it comes to computing, my generation are excellent front-end users. By applying our understanding of similar programs, we tend to construct working ways to navigate applications that are new to us. To my parents' generation, who grew up constructing things in school whose component parts all had a clear function (such as a table, or a handheld radio), this level of separation from components and their functions may be unnerving. The majority of my generation, however, would be incapable of designing or improving a program, because our understanding of its workings is superficial.</p>

<p>This is why I feel my generation is a transitional one in terms of our understanding of computers. To continue the GCSE analogy â€“ we are getting good grades, but our ability to construct, create and manipulate programs and the architecture on which they are based is poor. In an increasingly service-based economy, it is important to equip the next generation with the skills to do just that. It is therefore pleasing to see that computing and programming has been included in the Primary National Curriculum as of this year. In Key Stage 1, students will be taught about algorithms and encouraged to use logical reasoning. At Key Stage 2, students will be creating more complex programs and learning to think in terms of variables. By Key Stage 3, students will be using two or more programming languages, with at least one of them being textual. They will also start using Boolean operators and learn about how computer hardware and software interacts. The decision to integrate programming into the curriculum is a pragmatic and progressive move from a Coalition who have fallen far from these ideals in many other areas of education reform.</p>

<p>The one caveat to add to the praise is a question of where the funding for these programs comes. It is fairly safe to assume that the Department of Education and Ofsted do not have existing templates on how best to teach coding to students, as many of them will have fewer skills in this area than our future Key Stage 2 students. Consequently, training of teachers has been provided by organisations such as Code Club and Computing at School, who received donations from Google and Microsoft respectively. Though Google later denied the accusation, Code Club director Linda Sandvik resigned
after claiming that she had been placed under pressure to avoid mentioning anything negative about Code Club's sponsors, particularly in reference to mass surveillance. As ever, vigilance is required with regards to unsavoury influence from corporate funders, but it should not deter from the good work done by Code Club and Computing at School in training teachers.<p>

<p>The future of computing in this country seems bright, and it is likely that my generation's understanding of technology will be dismissed as that of chancers; stumbling across a program and learning its rules through trial and error. The first cohort of students who have received programming training from their first year in school will leave compulsory education in 2027. By this point, the face of technology will be totally different from what it is today. Our new curriculum should ensure that, while older users blink confusedly at foreign interfaces, our young adults are equipped to understand, exploit and improve upon it.</p>

How important is knowing back-end architecture in being able to adapt to new technology, and to innovation?

What are the key features of programming that school students should be made aware of?

To what extent should we be concerned by big corporate hitters such as Google and Microsoft funding teacher training?